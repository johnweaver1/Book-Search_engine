[{"E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\index.js":"1","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\App.js":"2","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\pages\\SavedBooks.js":"3","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\pages\\SearchBooks.js":"4","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\components\\Navbar.js":"5","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\components\\SignupForm.js":"6","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\components\\LoginForm.js":"7","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\utils\\mutations.js":"8","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\utils\\auth.js":"9","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\utils\\queries.js":"10","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\utils\\localStorage.js":"11","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\utils\\API.js":"12"},{"size":266,"mtime":1677018851575,"results":"13","hashOfConfig":"14"},{"size":1175,"mtime":1677378985262,"results":"15","hashOfConfig":"14"},{"size":2477,"mtime":1677370947690,"results":"16","hashOfConfig":"14"},{"size":4994,"mtime":1677370135413,"results":"17","hashOfConfig":"14"},{"size":2567,"mtime":1677018851765,"results":"18","hashOfConfig":"14"},{"size":3418,"mtime":1677371357329,"results":"19","hashOfConfig":"14"},{"size":2824,"mtime":1677378829815,"results":"20","hashOfConfig":"14"},{"size":1462,"mtime":1677199524689,"results":"21","hashOfConfig":"14"},{"size":1234,"mtime":1677018852334,"results":"22","hashOfConfig":"14"},{"size":313,"mtime":1677198324098,"results":"23","hashOfConfig":"14"},{"size":793,"mtime":1677018852423,"results":"24","hashOfConfig":"14"},{"size":1392,"mtime":1677018852210,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pf44ft",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\index.js",[],"E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\App.js",[],"E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\pages\\SavedBooks.js",[],"E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\pages\\SearchBooks.js",["52","53"],"import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  Row\n} from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  //New code to use the useMutation() Hook to execute the SAVE_BOOK mutation in the handleSaveBook() function instead of the saveBook() function that's imported from the API file\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await saveBook({\n        variables: { newBook: { ...bookToSave } },\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <div fluid className='text-light bg-dark pt-5'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </div>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <Row>\n          {searchedBooks.map((book) => {\n            return (\n              <Col md=\"4\">\n                <Card key={book.bookId} border='dark'>\n                  {book.image ? (\n                    <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                  ) : null}\n                  <Card.Body>\n                    <Card.Title>{book.title}</Card.Title>\n                    <p className='small'>Authors: {book.authors}</p>\n                    <Card.Text>{book.description}</Card.Text>\n                    {Auth.loggedIn() && (\n                      <Button\n                        disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                        className='btn-block btn-info'\n                        onClick={() => handleSaveBook(book.bookId)}>\n                        {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                          ? 'This book has already been saved!'\n                          : 'Save this Book!'}\n                      </Button>\n                    )}\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\components\\Navbar.js",[],"E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\components\\SignupForm.js",[],"E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\components\\LoginForm.js",[],"E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\utils\\mutations.js",[],"E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\utils\\auth.js",["54"],"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\utils\\queries.js",[],"E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\utils\\localStorage.js",[],"E:\\School Work\\Challenges\\Module 21\\Book-Search_engine\\client\\src\\utils\\API.js",[],{"ruleId":"55","severity":1,"message":"56","line":12,"column":10,"nodeType":"57","messageId":"58","endLine":12,"endColumn":18},{"ruleId":"55","severity":1,"message":"59","line":27,"column":22,"nodeType":"57","messageId":"58","endLine":27,"endColumn":27},{"ruleId":"60","severity":1,"message":"61","line":49,"column":1,"nodeType":"62","endLine":49,"endColumn":34},"no-unused-vars","'saveBook' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration"]